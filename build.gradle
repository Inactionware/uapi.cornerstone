/*
 * Copyright (C) 2017. The UAPI Authors
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at the LICENSE file.
 *
 * You must gained the permission from the authors if you want to
 * use the project into a commercial product
 */

buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'jacoco'

ext.project_version = getProjectVersion()
ext.publish_repo    = getMavenRepo()

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
        maven { url "http://dl.bintray.com/inactionware/maven-snapshot" }
        maven { url "http://dl.bintray.com/inactionware/maven-release" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    group = "${project_group}"
    version = "${project_version}"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        codacy
    }

    dependencies {
        testCompile "org.spockframework:spock-core:${spock_version}"

        testRuntime (
                "cglib:cglib-nodep:${cglib_version}",           // allows mocking of classes (in addition to interfaces)
                "org.objenesis:objenesis:${objenesis_version}"  // allows mocking of classes without default constructor (together with CGLIB)
        )
    }

    jar {
        manifest.attributes
        exclude('**/*.java')
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    def generatedSources = ['**/*_Generated.*']

    test {
        jacoco {
            excludes = generatedSources
        }
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: generatedSources)
            })
        }
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = "${jacoco_version}"
    }

    build.dependsOn jacocoTestReport
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}

def publishedProjects = subprojects.findAll { it.path != ':uapi.example' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

configurations {
    codacy
}

dependencies {
    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.7'
}

task uploadCoverageToCodacy(type: JavaExec) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    ]
}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    def prjVer = "${project_version_major}.${project_version_minor}.${project_version_fix}"
    if (release) {
        return "${prjVer}-release"
    } else if (rcno > 0) {
        return "${prjVer}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${prjVer}-${ts}"
    }
}

def getMavenRepo() {
    if (project.project_release.toBoolean()) {
        return 'maven-release'
    } else {
        return 'maven-snapshot'
    }
}
